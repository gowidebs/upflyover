import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Alert,
  LinearProgress,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField
} from '@mui/material';
import {\n  SupervisorAccount,\n  Block,\n  CheckCircle,\n  Warning,\n  Security,\n  Visibility,\n  MoreVert\n} from '@mui/icons-material';\nimport api from '../utils/api';\n\nconst AdvancedUserManagement = () => {\n  const [users, setUsers] = useState([]);\n  const [filters, setFilters] = useState({ status: 'all', risk: 'all', activity: 'all' });\n  const [loading, setLoading] = useState(true);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [actionDialog, setActionDialog] = useState(false);\n  const [actionType, setActionType] = useState('');\n  const [actionReason, setActionReason] = useState('');\n\n  useEffect(() => {\n    loadUsers();\n  }, [filters]);\n\n  const loadUsers = async () => {\n    setLoading(true);\n    try {\n      const params = new URLSearchParams(filters).toString();\n      const response = await api.get(`/api/admin/users/advanced?${params}`);\n      setUsers(response.data.users);\n    } catch (error) {\n      console.error('Failed to load users:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUserAction = async () => {\n    try {\n      await api.post('/api/admin/users/action', {\n        userId: selectedUser.id,\n        action: actionType,\n        reason: actionReason\n      });\n      setActionDialog(false);\n      loadUsers();\n    } catch (error) {\n      console.error('User action failed:', error);\n    }\n  };\n\n  const getRiskColor = (score) => {\n    if (score > 70) return 'error';\n    if (score > 30) return 'warning';\n    return 'success';\n  };\n\n  const getRiskLabel = (score) => {\n    if (score > 70) return 'High Risk';\n    if (score > 30) return 'Medium Risk';\n    return 'Low Risk';\n  };\n\n  return (\n    <Box p={3}>\n      <Typography variant=\"h5\" gutterBottom>\n        <SupervisorAccount sx={{ mr: 1, verticalAlign: 'middle' }} />\n        Advanced User Management\n      </Typography>\n\n      {/* Filters */}\n      <Grid container spacing={2} sx={{ mb: 3 }}>\n        <Grid item xs={12} md={3}>\n          <FormControl fullWidth size=\"small\">\n            <InputLabel>Status</InputLabel>\n            <Select\n              value={filters.status}\n              onChange={(e) => setFilters({...filters, status: e.target.value})}\n            >\n              <MenuItem value=\"all\">All Users</MenuItem>\n              <MenuItem value=\"active\">Active</MenuItem>\n              <MenuItem value=\"pending\">Pending</MenuItem>\n              <MenuItem value=\"suspended\">Suspended</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <FormControl fullWidth size=\"small\">\n            <InputLabel>Risk Level</InputLabel>\n            <Select\n              value={filters.risk}\n              onChange={(e) => setFilters({...filters, risk: e.target.value})}\n            >\n              <MenuItem value=\"all\">All Risk Levels</MenuItem>\n              <MenuItem value=\"high\">High Risk</MenuItem>\n              <MenuItem value=\"medium\">Medium Risk</MenuItem>\n              <MenuItem value=\"low\">Low Risk</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <FormControl fullWidth size=\"small\">\n            <InputLabel>Activity</InputLabel>\n            <Select\n              value={filters.activity}\n              onChange={(e) => setFilters({...filters, activity: e.target.value})}\n            >\n              <MenuItem value=\"all\">All Activity</MenuItem>\n              <MenuItem value=\"recent\">Recent Activity</MenuItem>\n              <MenuItem value=\"inactive\">Inactive</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n\n      {/* Users Table */}\n      <Card>\n        <CardContent>\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>User</TableCell>\n                  <TableCell>Type</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Risk Score</TableCell>\n                  <TableCell>Last Activity</TableCell>\n                  <TableCell>Flags</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {loading ? (\n                  <TableRow>\n                    <TableCell colSpan={7}>\n                      <LinearProgress />\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  users.map((user) => (\n                    <TableRow key={user.id}>\n                      <TableCell>\n                        <Box>\n                          <Typography variant=\"subtitle2\">\n                            {user.name || user.fullName}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {user.email}\n                          </Typography>\n                        </Box>\n                      </TableCell>\n                      <TableCell>\n                        <Chip \n                          label={user.userType} \n                          size=\"small\" \n                          color={user.userType === 'company' ? 'primary' : 'secondary'}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Chip \n                          label={user.accountActive ? 'Active' : 'Inactive'}\n                          color={user.accountActive ? 'success' : 'default'}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Box display=\"flex\" alignItems=\"center\">\n                          <Chip \n                            label={getRiskLabel(user.riskScore)}\n                            color={getRiskColor(user.riskScore)}\n                            size=\"small\"\n                          />\n                          <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                            {user.riskScore}%\n                          </Typography>\n                        </Box>\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant=\"caption\">\n                          {user.lastActivity?.action || 'No activity'}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Box display=\"flex\" gap={0.5}>\n                          {user.flaggedContent > 0 && (\n                            <Chip label={`${user.flaggedContent} flags`} size=\"small\" color=\"warning\" />\n                          )}\n                          {user.suspiciousActivity?.length > 0 && (\n                            <Chip label=\"Suspicious\" size=\"small\" color=\"error\" />\n                          )}\n                        </Box>\n                      </TableCell>\n                      <TableCell>\n                        <IconButton \n                          size=\"small\"\n                          onClick={() => {\n                            setSelectedUser(user);\n                            setActionDialog(true);\n                          }}\n                        >\n                          <MoreVert />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </CardContent>\n      </Card>\n\n      {/* Action Dialog */}\n      <Dialog open={actionDialog} onClose={() => setActionDialog(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>User Actions</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            Selected User: {selectedUser?.name || selectedUser?.fullName}\n          </Typography>\n          \n          <FormControl fullWidth sx={{ mb: 2, mt: 2 }}>\n            <InputLabel>Action</InputLabel>\n            <Select\n              value={actionType}\n              onChange={(e) => setActionType(e.target.value)}\n            >\n              <MenuItem value=\"suspend\">Suspend Account</MenuItem>\n              <MenuItem value=\"activate\">Activate Account</MenuItem>\n              <MenuItem value=\"flag\">Flag for Review</MenuItem>\n              <MenuItem value=\"verify\">Manual Verification</MenuItem>\n            </Select>\n          </FormControl>\n          \n          <TextField\n            fullWidth\n            multiline\n            rows={3}\n            label=\"Reason\"\n            value={actionReason}\n            onChange={(e) => setActionReason(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setActionDialog(false)}>Cancel</Button>\n          <Button onClick={handleUserAction} variant=\"contained\">\n            Execute Action\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default AdvancedUserManagement;