import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Alert,
  LinearProgress,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Chip,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow
} from '@mui/material';
import {
  MonitorHeart,
  Memory,
  Speed,
  Error,
  CheckCircle,
  Warning,
  Storage,
  NetworkCheck,
  TrendingUp
} from '@mui/icons-material';
import api from '../utils/api';

const SystemHealthMonitoring = () => {\n  const [healthData, setHealthData] = useState(null);\n  const [performanceData, setPerformanceData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [alerts, setAlerts] = useState([]);\n\n  useEffect(() => {\n    loadSystemHealth();\n    loadPerformanceData();\n    const interval = setInterval(() => {\n      loadSystemHealth();\n      loadPerformanceData();\n    }, 30000); // Refresh every 30 seconds\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  const loadSystemHealth = async () => {\n    try {\n      const response = await api.get('/api/admin/system/health');\n      setHealthData(response.data);\n      setAlerts(response.data.alerts || []);\n    } catch (error) {\n      console.error('Failed to load system health:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadPerformanceData = async () => {\n    try {\n      const response = await api.get('/api/admin/performance');\n      setPerformanceData(response.data);\n    } catch (error) {\n      console.error('Failed to load performance data:', error);\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'healthy': return 'success';\n      case 'warning': return 'warning';\n      case 'critical': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const formatUptime = (seconds) => {\n    const days = Math.floor(seconds / 86400);\n    const hours = Math.floor((seconds % 86400) / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    return `${days}d ${hours}h ${minutes}m`;\n  };\n\n  if (loading || !healthData) {\n    return (\n      <Box p={3}>\n        <Typography variant=\"h5\" gutterBottom>\n          System Health Monitoring\n        </Typography>\n        <LinearProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box p={3}>\n      <Typography variant=\"h5\" gutterBottom>\n        <MonitorHeart sx={{ mr: 1, verticalAlign: 'middle' }} />\n        System Health Monitoring\n      </Typography>\n\n      {/* System Alerts */}\n      {alerts.length > 0 && (\n        <Alert severity=\"warning\" sx={{ mb: 3 }}>\n          <Typography variant=\"subtitle2\">System Alerts ({alerts.length})</Typography>\n          {alerts.map((alert, index) => (\n            <Typography key={index} variant=\"body2\">\n              â€¢ {alert.message}\n            </Typography>\n          ))}\n        </Alert>\n      )}\n\n      {/* System Overview */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={1}>\n                <CheckCircle color=\"success\" sx={{ mr: 1 }} />\n                <Typography variant=\"h6\">System Status</Typography>\n              </Box>\n              <Chip \n                label={healthData.status.toUpperCase()}\n                color={getStatusColor(healthData.status)}\n                size=\"large\"\n              />\n              <Typography variant=\"body2\" sx={{ mt: 1 }}>\n                Uptime: {formatUptime(healthData.uptime)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={1}>\n                <Memory color=\"primary\" sx={{ mr: 1 }} />\n                <Typography variant=\"h6\">Memory Usage</Typography>\n              </Box>\n              <Typography variant=\"h4\">\n                {healthData.memory.percentage}%\n              </Typography>\n              <LinearProgress \n                variant=\"determinate\" \n                value={healthData.memory.percentage} \n                sx={{ mt: 1 }}\n                color={healthData.memory.percentage > 80 ? 'error' : 'primary'}\n              />\n              <Typography variant=\"caption\">\n                {healthData.memory.used}MB / {healthData.memory.total}MB\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={1}>\n                <Storage color=\"info\" sx={{ mr: 1 }} />\n                <Typography variant=\"h6\">Database</Typography>\n              </Box>\n              <Chip \n                label={healthData.database.status.toUpperCase()}\n                color={healthData.database.status === 'connected' ? 'success' : 'warning'}\n              />\n              <Typography variant=\"body2\" sx={{ mt: 1 }}>\n                Collections: {Object.values(healthData.database.collections).reduce((a, b) => a + b, 0)}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={1}>\n                <NetworkCheck color=\"secondary\" sx={{ mr: 1 }} />\n                <Typography variant=\"h6\">API Health</Typography>\n              </Box>\n              <Typography variant=\"h4\">\n                {healthData.api.totalRequests}\n              </Typography>\n              <Typography variant=\"body2\">\n                Error Rate: {healthData.api.errorRate}\n              </Typography>\n              <Typography variant=\"caption\">\n                Avg Response: {healthData.api.averageResponseTime}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Performance Metrics */}\n      {performanceData && (\n        <Grid container spacing={3} sx={{ mb: 3 }}>\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  <Speed sx={{ mr: 1, verticalAlign: 'middle' }} />\n                  Performance Metrics\n                </Typography>\n                \n                <Grid container spacing={2}>\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle2\">Response Time</Typography>\n                    <Typography variant=\"h6\">{performanceData.responseTime.average}ms</Typography>\n                    <Typography variant=\"caption\">Average</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle2\">Throughput</Typography>\n                    <Typography variant=\"h6\">{performanceData.throughput.requestsPerSecond}</Typography>\n                    <Typography variant=\"caption\">Requests/sec</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle2\">P95 Response</Typography>\n                    <Typography variant=\"h6\">{performanceData.responseTime.p95}ms</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle2\">Peak RPS</Typography>\n                    <Typography variant=\"h6\">{performanceData.throughput.peakRps}</Typography>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  <Error sx={{ mr: 1, verticalAlign: 'middle' }} />\n                  Error Analysis\n                </Typography>\n                \n                <Box display=\"flex\" justifyContent=\"space-between\" mb={2}>\n                  <Typography variant=\"subtitle2\">Total Errors</Typography>\n                  <Typography variant=\"h6\" color=\"error\">\n                    {performanceData.errors.total}\n                  </Typography>\n                </Box>\n                \n                <Box display=\"flex\" justifyContent=\"space-between\" mb={2}>\n                  <Typography variant=\"subtitle2\">Error Rate</Typography>\n                  <Typography variant=\"h6\">\n                    {performanceData.errors.rate}%\n                  </Typography>\n                </Box>\n                \n                <Box display=\"flex\" gap={1}>\n                  <Chip label={`4xx: ${performanceData.errors.breakdown['4xx']}`} size=\"small\" color=\"warning\" />\n                  <Chip label={`5xx: ${performanceData.errors.breakdown['5xx']}`} size=\"small\" color=\"error\" />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n\n      {/* Slow Queries */}\n      {performanceData?.slowQueries && (\n        <Card sx={{ mb: 3 }}>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Slow Queries Analysis\n            </Typography>\n            <TableContainer>\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Query</TableCell>\n                    <TableCell align=\"right\">Avg Time (ms)</TableCell>\n                    <TableCell align=\"right\">Count</TableCell>\n                    <TableCell>Status</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {performanceData.slowQueries.map((query, index) => (\n                    <TableRow key={index}>\n                      <TableCell>{query.query}</TableCell>\n                      <TableCell align=\"right\">{query.avgTime}</TableCell>\n                      <TableCell align=\"right\">{query.count}</TableCell>\n                      <TableCell>\n                        <Chip \n                          label={query.avgTime > 200 ? 'Slow' : 'Normal'}\n                          color={query.avgTime > 200 ? 'error' : 'success'}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Recommendations */}\n      {performanceData?.recommendations && (\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              <TrendingUp sx={{ mr: 1, verticalAlign: 'middle' }} />\n              Performance Recommendations\n            </Typography>\n            <List>\n              {performanceData.recommendations.map((recommendation, index) => (\n                <ListItem key={index}>\n                  <ListItemIcon>\n                    <Warning color=\"warning\" />\n                  </ListItemIcon>\n                  <ListItemText primary={recommendation} />\n                </ListItem>\n              ))}\n            </List>\n          </CardContent>\n        </Card>\n      )}\n    </Box>\n  );\n};\n\nexport default SystemHealthMonitoring;