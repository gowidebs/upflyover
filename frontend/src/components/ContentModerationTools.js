import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  IconButton
} from '@mui/material';
import {
  Gavel,
  Flag,
  CheckCircle,
  Block,
  Visibility,
  Delete,
  Warning
} from '@mui/icons-material';
import api from '../utils/api';

const ContentModerationTools = () => {\n  const [flaggedContent, setFlaggedContent] = useState([]);\n  const [filters, setFilters] = useState({ type: 'all', priority: 'all' });\n  const [loading, setLoading] = useState(true);\n  const [actionDialog, setActionDialog] = useState(false);\n  const [selectedContent, setSelectedContent] = useState(null);\n  const [moderationAction, setModerationAction] = useState('');\n  const [moderationReason, setModerationReason] = useState('');\n\n  useEffect(() => {\n    loadFlaggedContent();\n  }, [filters]);\n\n  const loadFlaggedContent = async () => {\n    setLoading(true);\n    try {\n      const params = new URLSearchParams(filters).toString();\n      const response = await api.get(`/api/admin/moderation/queue?${params}`);\n      setFlaggedContent(response.data.flaggedContent);\n    } catch (error) {\n      console.error('Failed to load flagged content:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleModerationAction = async () => {\n    try {\n      await api.post('/api/admin/moderation/action', {\n        contentId: selectedContent.contentId,\n        contentType: selectedContent.type,\n        action: moderationAction,\n        reason: moderationReason\n      });\n      setActionDialog(false);\n      loadFlaggedContent();\n    } catch (error) {\n      console.error('Moderation action failed:', error);\n    }\n  };\n\n  const getPriorityColor = (priority) => {\n    switch (priority) {\n      case 'high': return 'error';\n      case 'medium': return 'warning';\n      case 'low': return 'info';\n      default: return 'default';\n    }\n  };\n\n  const getFlagColor = (flag) => {\n    switch (flag) {\n      case 'spam': return 'warning';\n      case 'fraud': return 'error';\n      case 'inappropriate': return 'secondary';\n      default: return 'default';\n    }\n  };\n\n  return (\n    <Box p={3}>\n      <Typography variant=\"h5\" gutterBottom>\n        <Gavel sx={{ mr: 1, verticalAlign: 'middle' }} />\n        Content Moderation Tools\n      </Typography>\n\n      {/* Filters */}\n      <Grid container spacing={2} sx={{ mb: 3 }}>\n        <Grid item xs={12} md={4}>\n          <FormControl fullWidth size=\"small\">\n            <InputLabel>Content Type</InputLabel>\n            <Select\n              value={filters.type}\n              onChange={(e) => setFilters({...filters, type: e.target.value})}\n            >\n              <MenuItem value=\"all\">All Content</MenuItem>\n              <MenuItem value=\"requirement\">Requirements</MenuItem>\n              <MenuItem value=\"company\">Company Profiles</MenuItem>\n              <MenuItem value=\"message\">Messages</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12} md={4}>\n          <FormControl fullWidth size=\"small\">\n            <InputLabel>Priority</InputLabel>\n            <Select\n              value={filters.priority}\n              onChange={(e) => setFilters({...filters, priority: e.target.value})}\n            >\n              <MenuItem value=\"all\">All Priorities</MenuItem>\n              <MenuItem value=\"high\">High Priority</MenuItem>\n              <MenuItem value=\"medium\">Medium Priority</MenuItem>\n              <MenuItem value=\"low\">Low Priority</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n\n      {/* Moderation Queue */}\n      <Card>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            Moderation Queue ({flaggedContent.length} items)\n          </Typography>\n          \n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Content</TableCell>\n                  <TableCell>Type</TableCell>\n                  <TableCell>Flags</TableCell>\n                  <TableCell>Priority</TableCell>\n                  <TableCell>Created</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {flaggedContent.map((item) => (\n                  <TableRow key={item.id}>\n                    <TableCell>\n                      <Box>\n                        <Typography variant=\"subtitle2\" noWrap>\n                          {item.title}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\" noWrap>\n                          {item.content.substring(0, 100)}...\n                        </Typography>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Chip label={item.type} size=\"small\" />\n                    </TableCell>\n                    <TableCell>\n                      <Box display=\"flex\" gap={0.5} flexWrap=\"wrap\">\n                        {item.flags.map((flag, index) => (\n                          <Chip \n                            key={index}\n                            label={flag} \n                            size=\"small\" \n                            color={getFlagColor(flag)}\n                          />\n                        ))}\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Chip \n                        label={item.priority}\n                        color={getPriorityColor(item.priority)}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"caption\">\n                        {new Date(item.createdAt).toLocaleDateString()}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Chip \n                        label={item.status}\n                        color={item.status === 'pending' ? 'warning' : 'success'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Box display=\"flex\" gap={1}>\n                        <IconButton \n                          size=\"small\" \n                          color=\"primary\"\n                          onClick={() => {\n                            setSelectedContent(item);\n                            setActionDialog(true);\n                          }}\n                        >\n                          <Gavel />\n                        </IconButton>\n                        <IconButton size=\"small\" color=\"info\">\n                          <Visibility />\n                        </IconButton>\n                      </Box>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <Grid container spacing={2} sx={{ mt: 2 }}>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"error\">\n                High Priority\n              </Typography>\n              <Typography variant=\"h4\">\n                {flaggedContent.filter(item => item.priority === 'high').length}\n              </Typography>\n              <Button size=\"small\" color=\"error\" startIcon={<Warning />}>\n                Review Now\n              </Button>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"warning.main\">\n                Spam Detected\n              </Typography>\n              <Typography variant=\"h4\">\n                {flaggedContent.filter(item => item.flags.includes('spam')).length}\n              </Typography>\n              <Button size=\"small\" color=\"warning\" startIcon={<Flag />}>\n                Bulk Remove\n              </Button>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"error\">\n                Fraud Alerts\n              </Typography>\n              <Typography variant=\"h4\">\n                {flaggedContent.filter(item => item.flags.includes('fraud')).length}\n              </Typography>\n              <Button size=\"small\" color=\"error\" startIcon={<Block />}>\n                Investigate\n              </Button>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"success.main\">\n                Auto-Approved\n              </Typography>\n              <Typography variant=\"h4\">\n                {Math.floor(Math.random() * 50) + 20}\n              </Typography>\n              <Button size=\"small\" color=\"success\" startIcon={<CheckCircle />}>\n                View Log\n              </Button>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Moderation Action Dialog */}\n      <Dialog open={actionDialog} onClose={() => setActionDialog(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Moderate Content</DialogTitle>\n        <DialogContent>\n          {selectedContent && (\n            <Box>\n              <Typography variant=\"subtitle2\" gutterBottom>\n                Content: {selectedContent.title}\n              </Typography>\n              <Typography variant=\"body2\" sx={{ mb: 2, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>\n                {selectedContent.content}\n              </Typography>\n              \n              <Box display=\"flex\" gap={1} mb={2}>\n                <Typography variant=\"caption\">Flags:</Typography>\n                {selectedContent.flags.map((flag, index) => (\n                  <Chip key={index} label={flag} size=\"small\" color={getFlagColor(flag)} />\n                ))}\n              </Box>\n              \n              <FormControl fullWidth sx={{ mb: 2 }}>\n                <InputLabel>Action</InputLabel>\n                <Select\n                  value={moderationAction}\n                  onChange={(e) => setModerationAction(e.target.value)}\n                >\n                  <MenuItem value=\"approve\">Approve Content</MenuItem>\n                  <MenuItem value=\"remove\">Remove Content</MenuItem>\n                  <MenuItem value=\"suspend\">Suspend User</MenuItem>\n                  <MenuItem value=\"flag\">Flag for Further Review</MenuItem>\n                </Select>\n              </FormControl>\n              \n              <TextField\n                fullWidth\n                multiline\n                rows={3}\n                label=\"Reason\"\n                value={moderationReason}\n                onChange={(e) => setModerationReason(e.target.value)}\n              />\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setActionDialog(false)}>Cancel</Button>\n          <Button onClick={handleModerationAction} variant=\"contained\">\n            Execute Action\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default ContentModerationTools;