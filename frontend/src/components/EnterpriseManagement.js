import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Grid,
  TextField,
  Button,
  Switch,
  FormControlLabel,
  Tabs,
  Tab,
  Alert,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Select,
  MenuItem,
  FormControl,
  InputLabel
} from '@mui/material';
import {
  Business,
  Security,
  People,
  Integration,
  AccountBox,
  Palette,
  VpnKey
} from '@mui/icons-material';
import api from '../utils/api';

const EnterpriseManagement = () => {\n  const [tabValue, setTabValue] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [alert, setAlert] = useState('');\n  const [branding, setBranding] = useState({\n    logo: '',\n    primaryColor: '#1976d2',\n    secondaryColor: '#42a5f5',\n    companyName: '',\n    favicon: ''\n  });\n  const [teams, setTeams] = useState([]);\n  const [ssoConfig, setSsoConfig] = useState({\n    provider: 'saml',\n    entityId: '',\n    ssoUrl: '',\n    certificate: ''\n  });\n  const [integrations, setIntegrations] = useState([]);\n  const [securitySettings, setSecuritySettings] = useState({\n    twoFactorEnabled: false,\n    ipRestrictions: [],\n    sessionTimeout: 24\n  });\n  const [teamDialog, setTeamDialog] = useState(false);\n  const [newTeam, setNewTeam] = useState({ name: '', members: [] });\n\n  useEffect(() => {\n    loadEnterpriseData();\n  }, []);\n\n  const loadEnterpriseData = async () => {\n    try {\n      // Load existing enterprise configuration\n      const [teamsRes, integrationsRes] = await Promise.all([\n        api.get('/api/enterprise/teams'),\n        api.get('/api/enterprise/integrations')\n      ]);\n      \n      setTeams(teamsRes.data.teams || []);\n      setIntegrations(integrationsRes.data.integrations || []);\n    } catch (error) {\n      console.error('Failed to load enterprise data:', error);\n    }\n  };\n\n  const updateBranding = async () => {\n    setLoading(true);\n    try {\n      await api.post('/api/enterprise/branding', branding);\n      setAlert('Branding updated successfully');\n    } catch (error) {\n      setAlert('Failed to update branding');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const configureSso = async () => {\n    setLoading(true);\n    try {\n      await api.post('/api/enterprise/sso/configure', {\n        provider: ssoConfig.provider,\n        config: ssoConfig\n      });\n      setAlert('SSO configured successfully');\n    } catch (error) {\n      setAlert('Failed to configure SSO');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createTeam = async () => {\n    try {\n      const response = await api.post('/api/enterprise/teams', newTeam);\n      setTeams([...teams, response.data.team]);\n      setTeamDialog(false);\n      setNewTeam({ name: '', members: [] });\n      setAlert('Team created successfully');\n    } catch (error) {\n      setAlert('Failed to create team');\n    }\n  };\n\n  const setup2FA = async () => {\n    try {\n      const response = await api.post('/api/enterprise/security/2fa/setup');\n      setAlert(`2FA setup initiated. Secret: ${response.data.secret}`);\n    } catch (error) {\n      setAlert('Failed to setup 2FA');\n    }\n  };\n\n  return (\n    <Box p={3}>\n      <Typography variant=\"h4\" gutterBottom>\n        <Business sx={{ mr: 1, verticalAlign: 'middle' }} />\n        Enterprise Management\n      </Typography>\n\n      {alert && (\n        <Alert \n          severity={alert.includes('success') ? 'success' : 'error'} \n          sx={{ mb: 2 }}\n          onClose={() => setAlert('')}\n        >\n          {alert}\n        </Alert>\n      )}\n\n      <Tabs value={tabValue} onChange={(e, v) => setTabValue(v)} sx={{ mb: 3 }}>\n        <Tab label=\"White-Label\" icon={<Palette />} />\n        <Tab label=\"Team Management\" icon={<People />} />\n        <Tab label=\"SSO Configuration\" icon={<VpnKey />} />\n        <Tab label=\"Security\" icon={<Security />} />\n        <Tab label=\"Integrations\" icon={<Integration />} />\n        <Tab label=\"Account Manager\" icon={<AccountBox />} />\n      </Tabs>\n\n      {/* White-Label Branding */}\n      {tabValue === 0 && (\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              White-Label Branding Configuration\n            </Typography>\n            \n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Company Name\"\n                  value={branding.companyName}\n                  onChange={(e) => setBranding({...branding, companyName: e.target.value})}\n                  sx={{ mb: 2 }}\n                />\n                \n                <TextField\n                  fullWidth\n                  label=\"Logo URL\"\n                  value={branding.logo}\n                  onChange={(e) => setBranding({...branding, logo: e.target.value})}\n                  sx={{ mb: 2 }}\n                />\n                \n                <TextField\n                  fullWidth\n                  label=\"Favicon URL\"\n                  value={branding.favicon}\n                  onChange={(e) => setBranding({...branding, favicon: e.target.value})}\n                  sx={{ mb: 2 }}\n                />\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Primary Color\"\n                  type=\"color\"\n                  value={branding.primaryColor}\n                  onChange={(e) => setBranding({...branding, primaryColor: e.target.value})}\n                  sx={{ mb: 2 }}\n                />\n                \n                <TextField\n                  fullWidth\n                  label=\"Secondary Color\"\n                  type=\"color\"\n                  value={branding.secondaryColor}\n                  onChange={(e) => setBranding({...branding, secondaryColor: e.target.value})}\n                  sx={{ mb: 2 }}\n                />\n                \n                <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>\n                  <Typography variant=\"subtitle2\" gutterBottom>Preview</Typography>\n                  <Box \n                    sx={{ \n                      p: 2, \n                      bgcolor: branding.primaryColor, \n                      color: 'white',\n                      borderRadius: 1\n                    }}\n                  >\n                    {branding.companyName || 'Your Company'}\n                  </Box>\n                </Box>\n              </Grid>\n            </Grid>\n            \n            <Button \n              variant=\"contained\" \n              onClick={updateBranding}\n              disabled={loading}\n              sx={{ mt: 2 }}\n            >\n              {loading ? 'Updating...' : 'Update Branding'}\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Team Management */}\n      {tabValue === 1 && (\n        <Card>\n          <CardContent>\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n              <Typography variant=\"h6\">Team Management</Typography>\n              <Button \n                variant=\"contained\" \n                onClick={() => setTeamDialog(true)}\n              >\n                Create Team\n              </Button>\n            </Box>\n            \n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Team Name</TableCell>\n                    <TableCell>Members</TableCell>\n                    <TableCell>Permissions</TableCell>\n                    <TableCell>Created</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {teams.map((team) => (\n                    <TableRow key={team.id}>\n                      <TableCell>{team.name}</TableCell>\n                      <TableCell>{team.members.length}</TableCell>\n                      <TableCell>\n                        <Box display=\"flex\" gap={0.5} flexWrap=\"wrap\">\n                          {Object.entries(team.permissions)\n                            .filter(([, value]) => value)\n                            .map(([key]) => (\n                              <Chip key={key} label={key} size=\"small\" />\n                            ))\n                          }\n                        </Box>\n                      </TableCell>\n                      <TableCell>\n                        {new Date(team.createdAt).toLocaleDateString()}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* SSO Configuration */}\n      {tabValue === 2 && (\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Single Sign-On Configuration\n            </Typography>\n            \n            <FormControl fullWidth sx={{ mb: 2 }}>\n              <InputLabel>SSO Provider</InputLabel>\n              <Select\n                value={ssoConfig.provider}\n                onChange={(e) => setSsoConfig({...ssoConfig, provider: e.target.value})}\n              >\n                <MenuItem value=\"saml\">SAML 2.0</MenuItem>\n                <MenuItem value=\"oauth2\">OAuth 2.0</MenuItem>\n                <MenuItem value=\"oidc\">OpenID Connect</MenuItem>\n              </Select>\n            </FormControl>\n            \n            <TextField\n              fullWidth\n              label=\"Entity ID\"\n              value={ssoConfig.entityId}\n              onChange={(e) => setSsoConfig({...ssoConfig, entityId: e.target.value})}\n              sx={{ mb: 2 }}\n            />\n            \n            <TextField\n              fullWidth\n              label=\"SSO URL\"\n              value={ssoConfig.ssoUrl}\n              onChange={(e) => setSsoConfig({...ssoConfig, ssoUrl: e.target.value})}\n              sx={{ mb: 2 }}\n            />\n            \n            <TextField\n              fullWidth\n              multiline\n              rows={4}\n              label=\"Certificate\"\n              value={ssoConfig.certificate}\n              onChange={(e) => setSsoConfig({...ssoConfig, certificate: e.target.value})}\n              sx={{ mb: 2 }}\n            />\n            \n            <Button \n              variant=\"contained\" \n              onClick={configureSso}\n              disabled={loading}\n            >\n              {loading ? 'Configuring...' : 'Configure SSO'}\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Security Settings */}\n      {tabValue === 3 && (\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Advanced Security Settings\n            </Typography>\n            \n            <FormControlLabel\n              control={\n                <Switch\n                  checked={securitySettings.twoFactorEnabled}\n                  onChange={(e) => setSecuritySettings({\n                    ...securitySettings, \n                    twoFactorEnabled: e.target.checked\n                  })}\n                />\n              }\n              label=\"Two-Factor Authentication\"\n              sx={{ mb: 2 }}\n            />\n            \n            {securitySettings.twoFactorEnabled && (\n              <Button \n                variant=\"outlined\" \n                onClick={setup2FA}\n                sx={{ mb: 2, display: 'block' }}\n              >\n                Setup 2FA\n              </Button>\n            )}\n            \n            <TextField\n              fullWidth\n              label=\"Allowed IP Addresses (comma-separated)\"\n              value={securitySettings.ipRestrictions.join(', ')}\n              onChange={(e) => setSecuritySettings({\n                ...securitySettings,\n                ipRestrictions: e.target.value.split(',').map(ip => ip.trim())\n              })}\n              sx={{ mb: 2 }}\n              helperText=\"Leave empty to allow all IPs\"\n            />\n            \n            <TextField\n              fullWidth\n              type=\"number\"\n              label=\"Session Timeout (hours)\"\n              value={securitySettings.sessionTimeout}\n              onChange={(e) => setSecuritySettings({\n                ...securitySettings,\n                sessionTimeout: parseInt(e.target.value)\n              })}\n              sx={{ mb: 2 }}\n            />\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Integrations */}\n      {tabValue === 4 && (\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Custom Integrations\n            </Typography>\n            \n            <Grid container spacing={2}>\n              {['CRM', 'ERP', 'HR System', 'Custom API'].map((type) => (\n                <Grid item xs={12} md={6} key={type}>\n                  <Card variant=\"outlined\">\n                    <CardContent>\n                      <Typography variant=\"subtitle1\">{type}</Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Connect your {type.toLowerCase()} system\n                      </Typography>\n                      <Button size=\"small\" sx={{ mt: 1 }}>\n                        Configure\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              ))}\n            </Grid>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Account Manager */}\n      {tabValue === 5 && (\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\" gutterBottom>\n              Dedicated Account Manager\n            </Typography>\n            \n            <Alert severity=\"info\" sx={{ mb: 2 }}>\n              Enterprise clients are assigned a dedicated account manager for personalized support.\n            </Alert>\n            \n            <Grid container spacing={2}>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Manager Name\"\n                  defaultValue=\"Sarah Johnson\"\n                  disabled\n                  sx={{ mb: 2 }}\n                />\n                \n                <TextField\n                  fullWidth\n                  label=\"Email\"\n                  defaultValue=\"sarah.johnson@upflyover.com\"\n                  disabled\n                  sx={{ mb: 2 }}\n                />\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Phone\"\n                  defaultValue=\"+1 (555) 123-4567\"\n                  disabled\n                  sx={{ mb: 2 }}\n                />\n                \n                <TextField\n                  fullWidth\n                  label=\"Timezone\"\n                  defaultValue=\"EST (UTC-5)\"\n                  disabled\n                  sx={{ mb: 2 }}\n                />\n              </Grid>\n            </Grid>\n            \n            <Button variant=\"contained\" disabled>\n              Contact Account Manager\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Team Creation Dialog */}\n      <Dialog open={teamDialog} onClose={() => setTeamDialog(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Create New Team</DialogTitle>\n        <DialogContent>\n          <TextField\n            fullWidth\n            label=\"Team Name\"\n            value={newTeam.name}\n            onChange={(e) => setNewTeam({...newTeam, name: e.target.value})}\n            sx={{ mt: 1, mb: 2 }}\n          />\n          \n          <Typography variant=\"subtitle2\" gutterBottom>\n            Team Permissions\n          </Typography>\n          \n          {[\n            'canCreateRequirements',\n            'canManageTeam', \n            'canViewAnalytics',\n            'canManageBilling'\n          ].map((permission) => (\n            <FormControlLabel\n              key={permission}\n              control={<Switch />}\n              label={permission.replace('can', '').replace(/([A-Z])/g, ' $1')}\n              sx={{ display: 'block' }}\n            />\n          ))}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setTeamDialog(false)}>Cancel</Button>\n          <Button onClick={createTeam} variant=\"contained\">\n            Create Team\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default EnterpriseManagement;